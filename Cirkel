import java.util.Collection;
import java.util.LinkedList;


public class Cirkel {

	private Punt midden;
	private double radius;
	
	public Cirkel(double x, double y, double r){
		this.midden = new Punt(x, y);
		this.radius = r;
	}
	
	public Punt getMidden(){
		return this.midden;
	}
	
	public double getRadius(){
		return this.radius;
	}
	
	/**
	 * Indien de cirkels samenvallen worden ze niet als snijdend beschouwd 
	 * en geeft het algoritme geen snijpunten terug
	 */
	public boolean intersect(Cirkel c){
		double d = this.midden.distance(c.getMidden());
		//cirkels zijn ofwel ver uit elkaar, ofwel samenvallend, ofwel ligt een in een andere, ofwel snijdend
		if (d > (this.radius + c.getRadius()))		return false;
		else 
			if ((this.radius == c.getRadius()) && (this.radius == c.getRadius()))		return false; 
			else 
				if (d < (Math.abs(this.radius - c.getRadius())))	return false;
				else
					return true;
	}
	
	public Collection<Punt> getSnijpunten(Cirkel c){
		//TODO
		//?? https://fypandroid.wordpress.com/2011/07/03/how-to-calculate-the-intersection-of-two-circles-java/
		// NEE :http://2000clicks.com/mathhelp/GeometryConicSectionCircleIntersection.aspx
		Collection<Punt> snijpunten = new LinkedList<Punt>();
		double d = this.midden.distance(c.getMidden());
		double k = (1/4)*Math.sqrt((Math.pow(this.radius + c.getRadius(), 2) - Math.pow(d, 2))*(Math.pow(d, 2) - Math.pow(this.radius - c.getRadius(), 2)));
		
		double tx1 = (1/2)*(c.getMidden().getX() + this.midden.getX());
		double ty1 = (1/2)*(c.getMidden().getY() + this.midden.getY());
		double t2 = (1/2)*(Math.pow(this.radius, 2)- Math.pow(c.getRadius(), 2))/Math.pow(d, 2);
		double t3 = 2*k/Math.pow(d, 2);
		
		double x = c.getMidden().getX() - this.midden.getX();
		double y = c.getMidden().getY() - this.midden.getY();
		
		double x1 = tx1 + x*t2 + y*t3;
		double x2 = tx1 + x*t2 - y*t3;
		double y1 = ty1 + y*t2 + x*t3;
		double y2 = ty1 + y*t2 - x*t3;
		
		snijpunten.add(new Punt(x1, y1));
		snijpunten.add(new Punt(x2, y2));
		
		return snijpunten;
	}
	
}
